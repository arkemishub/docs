"use strict";(self.webpackChunkarke=self.webpackChunkarke||[]).push([[5476],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>m});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=o.createContext({}),u=function(e){var n=o.useContext(d),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=u(e.components);return o.createElement(d.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=u(t),m=r,k=p["".concat(d,".").concat(m)]||p[m]||c[m]||a;return t?o.createElement(k,i(i({ref:n},l),{},{components:t})):o.createElement(k,i({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,i=new Array(a);i[0]=p;var s={};for(var d in n)hasOwnProperty.call(n,d)&&(s[d]=n[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var u=2;u<a;u++)i[u]=t[u];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},9062:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=t(87462),r=(t(67294),t(3905));const a={id:"crud",title:"CRUD"},i=void 0,s={unversionedId:"docs/web/crud",id:"docs/web/crud",title:"CRUD",description:"This guide talks about setting a Crud page through Arke.",source:"@site/docs/docs/web/crud.md",sourceDirName:"docs/web",slug:"/docs/web/crud",permalink:"/arke-docs/docs/web/crud",draft:!1,editUrl:"https://github.com/arkemishub/arke-docs/docs/docs/web/crud.md",tags:[],version:"current",frontMatter:{id:"crud",title:"CRUD"},sidebar:"docs",previous:{title:"Form",permalink:"/arke-docs/docs/web/form"},next:{title:"Arke CLI",permalink:"/arke-docs/docs/cli/intro"}},d={},u=[{value:"Init CRUD",id:"init-crud",level:2},{value:"Step 1: Create a CRUD state",id:"step-1-create-a-crud-state",level:3},{value:"Step 2: Create/Edit CrudComponent",id:"step-2-createedit-crudcomponent",level:3},{value:"Step 3: useCrud hook",id:"step-3-usecrud-hook",level:3},{value:"Step 4: useCrud on CrudComponent",id:"step-4-usecrud-on-crudcomponent",level:3},{value:"Step 5: Delete CrudComponent",id:"step-5-delete-crudcomponent",level:3},{value:"Step 6: Compose CRUD on your page",id:"step-6-compose-crud-on-your-page",level:3},{value:"Advanced: Link after creation",id:"advanced-link-after-creation",level:2},{value:"Step 1: useLink and useUnlink",id:"step-1-uselink-and-useunlink",level:3},{value:"Step 2: Consume link hooks",id:"step-2-consume-link-hooks",level:3}],l={toc:u};function c(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"This guide talks about setting a Crud page through Arke."),(0,r.kt)("h2",{id:"init-crud"},"Init CRUD"),(0,r.kt)("h3",{id:"step-1-create-a-crud-state"},"Step 1: Create a CRUD state"),(0,r.kt)("p",null,"Create a dedicated state to manage your CRUD:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"type ID = string;\nexport interface CrudState {\n    add?: boolean;\n    edit?: boolean | ID;\n    delete?: boolean | ID;\n}\n\nexport default function Page() {\n    const [crud, setCrud] = useState<CrudState>({\n        add: false,\n        edit: false,\n        delete: false,\n    })\n\n    return (\n        <div>\n            ...\n        </div>\n    )\n}\n")),(0,r.kt)("h3",{id:"step-2-createedit-crudcomponent"},"Step 2: Create/Edit CrudComponent"),(0,r.kt)("p",null,"Create a CrudComponent that will be used as Dialog/Drawer form to create/edit your Arke or Unit."),(0,r.kt)("p",null,"For example if you have to manage ",(0,r.kt)("inlineCode",{parentName:"p"},"Products")," units, you can name it ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductCrud")," in the following way:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"export function ProductCrud(props: CrudProps) {\n  const client = useClient();\n  const { open, title, id, onClose } = props;\n\n  return (\n    <Dialog open={!!open} title={title} onClose={onClose}>\n      <Form\n        client={client}\n        arke=\"product\"\n        unit={id}\n        onSubmit={(data) => console.log(data)}\n        exclude={['id', 'arke_id']}\n      >\n        {({ loading }) =>\n          loading ? (\n            <Loader />\n          ) : (\n            <>\n              <Container>\n                <FormField\n                  parameter={'image'}\n                  component={(props) => <ProductImage {...props} />}\n                />\n                <FormField parameter={'name'} />\n                <FormField parameter={'slug'} />\n                <FormField parameter={'product_type'} />\n                <FormField parameter={'price'} />\n                <FormField parameter={'description'} />\n              </Container>\n              <Action>\n                <Button disabled={loading} variant=\"outlined\" onClick={onClose}>\n                  Annulla\n                </Button>\n                <Button disabled={loading} variant=\"contained\" type=\"submit\">\n                  Conferma\n                </Button>\n              </Action>\n            </>\n          )\n        }\n      </Form>\n    </Dialog>\n  );\n}\n")),(0,r.kt)("h3",{id:"step-3-usecrud-hook"},"Step 3: useCrud hook"),(0,r.kt)("p",null,"Create a global ",(0,r.kt)("inlineCode",{parentName:"p"},"useCrud")," hook to simply manage the create/edit API call on your CRUDs just passing arke,\nunit and callback params;  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { getClient } from '@arke/getClient';\nimport { TResponse, TUnit } from '@arkejs/client';\n\nexport default function useCrud(\n  arke: string,\n  unit: string | undefined,\n  callback: (data: TResponse<TUnit>) => void\n) {\n  const client = getClient();\n  function onSubmit(data: Record<string, unknown>) {\n    if (!unit) {\n      client.unit.create(arke, data).then(\n        (res) => callback(res),\n        (err) =>\n          err.response.data.messages.forEach((item: { message: string }) =>\n            // Error notification\n            console.log(item.message)\n          )\n      );\n    } else {\n      client.unit.edit(arke, unit as string, data).then(\n        (res) => callback(res),\n        (err) =>\n          err.response.data.messages.forEach((item: { message: string }) =>\n            // Error notification\n            console.log(item.message)\n          )\n      );\n    }\n  }\n  return { onSubmit };\n}\n")),(0,r.kt)("h3",{id:"step-4-usecrud-on-crudcomponent"},"Step 4: useCrud on CrudComponent"),(0,r.kt)("p",null,"Import your useCrud hook on CrudComponent, this will provide the ",(0,r.kt)("inlineCode",{parentName:"p"},"onSubmit")," that you can\nuse on your Form."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useCrud } from '@hooks'; \n\nexport function ProductCrud(props: CrudProps) {\n    // ...\n    const {onSubmit} = useCrud('product', id, props.onSubmit);\n\n    return (\n        <Dialog open={!!open} title={title} onClose={onClose}>\n            <Form\n                // Connect useCrud onSubmit\n                onSubmit={onSubmit}\n            >\n                ...\n            </Form>\n        </Dialog>\n    )\n}\n")),(0,r.kt)("h3",{id:"step-5-delete-crudcomponent"},"Step 5: Delete CrudComponent"),(0,r.kt)("p",null,"Create and export a ",(0,r.kt)("inlineCode",{parentName:"p"},"Delete")," component from ComponentCrud:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'function Delete(props: DeleteProps) {\n  const client = useClient();\n  const { arke, id, open, title, onClose, onSubmit } = props;\n\n  function onDelete() {\n      client.unit.delete(arke, id as string).then((res) => {\n        onSubmit(res);\n      });\n  }\n\n  return (\n    <Dialog open={!!open} title={title} onClose={onClose}>\n      <Container>\n        <p className="text-sm">Sei sicuro di voler continuare?</p>\n      </Container>\n      <Action>\n        <Button variant="outlined" onClick={onClose}>\n          Annulla\n        </Button>\n        <Button variant="contained" onClick={onDelete}>\n          Conferma\n        </Button>\n      </Action>\n    </Dialog>\n  );\n}\n')),(0,r.kt)("h3",{id:"step-6-compose-crud-on-your-page"},"Step 6: Compose CRUD on your page"),(0,r.kt)("p",null,"Import your CrudComponent on your page and connect the state variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},'import {\n    ProductCrud as ProductAdd,\n    ProductCrud as ProductEdit,\n    Delete as ProductDelete,\n} from \'@crud/products/ProductCrud\';\n\nexport default function Products() {\n    const [crud, setCrud] = useState<CrudState>({\n        add: false,\n        edit: false,\n        delete: false,\n    });\n    \n    <Button onClick={setCrud((p) => ({ ...p, add: false }))}>Add</Button>\n    <Button onClick={setCrud((p) => ({ ...p, edit: false }))}>Edit</Button>\n    <Button onClick={setCrud((p) => ({ ...p, delete: false }))}>Delete</Button>\n\n    <ProductAdd\n        title="Aggiungi prodotto"\n        open={crud.add}\n        onClose={() => setCrud((p) => ({ ...p, add: false }))}\n        onSubmit={() => {\n            toast.success(`Prodotto aggiunta con successo`);\n            setCrud((p) => ({ ...p, add: false }));\n        }}\n    />\n    <ProductEdit\n        title="Modifica prodotto"\n        open={crud.edit}\n        id={crud.edit as string}\n        onClose={() => setCrud((p) => ({ ...p, edit: false }))}\n        onSubmit={() => {\n            toast.success(`Prodotto modificata con successo`);\n            setCrud((p) => ({ ...p, edit: false }));\n        }}\n    />\n    <ProductDelete\n        arke="product"\n        title="Elimina prodotto"\n        open={crud.delete}\n        id={crud.delete as string}\n        onClose={() => setCrud((p) => ({ ...p, delete: false }))}\n        onSubmit={() => {\n            toast.success(`Prodotto eliminata con successo`);\n            setCrud((p) => ({ ...p, delete: false }));\n        }}\n    />\n}\n')),(0,r.kt)("p",null,"Repeat these steps for all CRUDs present in your application."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can generate a global and generalized components for all CRUDs")),(0,r.kt)("h2",{id:"advanced-link-after-creation"},"Advanced: Link after creation"),(0,r.kt)("p",null,"In some cases on the unit creation process, it necessary ",(0,r.kt)("inlineCode",{parentName:"p"},"Link")," your unit to another one."),(0,r.kt)("h3",{id:"step-1-uselink-and-useunlink"},"Step 1: useLink and useUnlink"),(0,r.kt)("p",null,"Create the ",(0,r.kt)("inlineCode",{parentName:"p"},"useLink")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"useUnlink")," hooks, that will used after the creation process."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import { useClient } from '@hooks';\n\nexport function useLink(\n  arkeParent: string,\n  unitParent: string | string[] | undefined,\n  arkeChild: string,\n  callback?: () => void\n) {\n  const client = useClient();\n  function onLink(unitChild: string) {\n    return client.api\n      .post(\n        `/${arkeParent}/unit/${unitParent}/link/link/${arkeChild}/unit/${unitChild}`\n      )\n      .then(callback)\n      .catch((err: string) => console.error(err));\n  }\n  return { onLink };\n}\n\nexport function useUnlink(\n  arkeParent: string,\n  unitParent: string | string[] | undefined,\n  arkeChild: string,\n  callback?: () => void\n) {\n  const client = useClient();\n  function onUnlink(unitChild: string) {\n    return client.api\n      .delete(\n        `/${arkeParent}/unit/${unitParent}/link/link/${arkeChild}/unit/${unitChild}`\n      )\n      .then(callback)\n      .catch((err: string) => console.error(err));\n  }\n  return { onUnlink };\n}\n")),(0,r.kt)("h3",{id:"step-2-consume-link-hooks"},"Step 2: Consume link hooks"),(0,r.kt)("p",null,"Use useLink and useUnlink on your CRUD page:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"import {\n    ProductCrud as ProductAdd,\n    ProductCrud as ProductEdit,\n    Delete as ProductDelete,\n} from '@crud/products/ProductCrud';\n\nexport default function Products() {\n    const [crud, setCrud] = useState<CrudState>({\n        add: false,\n        edit: false,\n        delete: false,\n    });\n\n    // Link new product [child] to category [parent]\n    const { onLink } = useLink('category', id, 'product', () => {\n        toast.success(`Coworker aggiunto con successo`);\n        setCrud((p) => ({ ...p, add: false }));\n    });\n    const { onUnlink } = useUnlink('category', id, 'product');\n\n    <Button onClick={setCrud((p) => ({ ...p, add: false }))}>Add</Button>\n    <Button onClick={setCrud((p) => ({ ...p, edit: false }))}>Edit</Button>\n    <Button onClick={setCrud((p) => ({ ...p, delete: false }))}>Delete</Button>\n\n    <ProductAdd\n        title=\"Aggiungi prodotto\"\n        open={crud.add}\n        onClose={() => setCrud((p) => ({ ...p, add: false }))}\n        // Pass the id of the new product to onLink method\n        onSubmit={(res) => onLink(res.data.content.id)}\n    />\n    <ProductEdit\n        title=\"Modifica prodotto\"\n        open={crud.edit}\n        id={crud.edit as string}\n        onClose={() => setCrud((p) => ({ ...p, edit: false }))}\n        onSubmit={() => {\n            toast.success(`Prodotto modificata con successo`);\n            setCrud((p) => ({ ...p, edit: false }));\n        }}\n    />\n    <ProductDelete\n        arke=\"product\"\n        title=\"Elimina prodotto\"\n        open={crud.delete}\n        id={crud.delete as string}\n        onClose={() => setCrud((p) => ({ ...p, delete: false }))}\n        // Before delete unlink the selected product\n        onBeforeSubmit={() => onUnlink(crud.delete as string)}\n        onSubmit={() => {\n            toast.success(`Prodotto eliminata con successo`);\n            setCrud((p) => ({ ...p, delete: false }));\n        }}\n    />\n}\n")))}c.isMDXComponent=!0}}]);