"use strict";(self.webpackChunkarke=self.webpackChunkarke||[]).push([[6055],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(a),m=n,k=d["".concat(s,".").concat(m)]||d[m]||u[m]||l;return a?r.createElement(k,o(o({ref:t},p),{},{components:a})):r.createElement(k,o({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,o=new Array(l);o[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var c=2;c<l;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},1155:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=a(87462),n=(a(67294),a(3905));const l={id:"cli",title:"CLI usage"},o=void 0,i={unversionedId:"guides/cli",id:"guides/cli",title:"CLI usage",description:"arkectl is the official CLI for Arke. It is a command-line tool that allows you to interact with Arke from a terminal window.",source:"@site/reference/guides/cli.md",sourceDirName:"guides",slug:"/guides/cli",permalink:"/docs/guides/cli",draft:!1,editUrl:"https://github.com/arkemishub/arke-docs/reference/guides/cli.md",tags:[],version:"current",frontMatter:{id:"cli",title:"CLI usage"},sidebar:"docsSidebar",previous:{title:"Integrating with custom frontend",permalink:"/docs/tutorial/frontend"},next:{title:"Create Arke",permalink:"/docs/guides/create-arke"}},s={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Installation",id:"installation",level:2},{value:"Commands",id:"commands",level:2},{value:"install",id:"install",level:3},{value:"create-app",id:"create-app",level:3},{value:"start",id:"start",level:3},{value:"update",id:"update",level:3},{value:"Notes",id:"notes",level:2}],p={toc:c};function u(e){let{components:t,...a}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"arkectl")," is the official CLI for Arke. It is a command-line tool that allows you to interact with Arke from a terminal window.\nIt allows you to create new projects, start the console and the API service."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://docs.docker.com/get-docker/"},"Docker")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://brew.sh/"},"Homebrew")," or ",(0,n.kt)("a",{parentName:"li",href:"https://golang.org/doc/install"},"GO"))),(0,n.kt)("h2",{id:"installation"},"Installation"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"Install ",(0,n.kt)("inlineCode",{parentName:"li"},"arkectl")," using GO.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"go install github.com/arkemishub/arkectl@latest\n"))),(0,n.kt)("li",{parentName:"ol"},"Expose a new variable called ARKEPATH within your ",(0,n.kt)("inlineCode",{parentName:"li"},".zshrc")," or ",(0,n.kt)("inlineCode",{parentName:"li"},".bashrc"),(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash",metastring:"title=.zshrc",title:".zshrc"},"export ARKEPATH=$HOME/arke\n"))),(0,n.kt)("li",{parentName:"ol"},"Run ",(0,n.kt)("inlineCode",{parentName:"li"},"arkectl install")," to download required files to run Arke locally.",(0,n.kt)("pre",{parentName:"li"},(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"arkectl install\n")))),(0,n.kt)("h2",{id:"commands"},"Commands"),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"install"},"install"),(0,n.kt)("p",null,"Downloads required files to run Arke locally."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"arkectl install\n")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"create-app"},"create-app"),(0,n.kt)("p",null,"Bootstrap Arke environment by starting the console and the API service."),(0,n.kt)("p",null,"Args:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"project-name")," - Name of the project to create (optional)")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"arkectl create-app <project-name>\n")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"start"},"start"),(0,n.kt)("p",null,"Starts the console and the API service."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"arkectl start\n")),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"update"},"update"),(0,n.kt)("p",null,"Updated console and API service docker images to the latest version."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-bash"},"arkectl update\n")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"notes"},"Notes"),(0,n.kt)("p",null,"By using the CLI you will be able to create a new project, start the console and the API service.\nBy default the console will be available at ",(0,n.kt)("a",{parentName:"p",href:"http://localhost:3100"},"http://localhost:3100")," and the API service at ",(0,n.kt)("a",{parentName:"p",href:"http://localhost:4000"},"http://localhost:4000"),"."))}u.isMDXComponent=!0}}]);