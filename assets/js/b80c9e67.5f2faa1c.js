"use strict";(self.webpackChunkarke=self.webpackChunkarke||[]).push([[1162],{6262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>k,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var a=n(87462),l=(n(67294),n(3905));const r={id:"getting-started-local-installation",title:"Quickstart on Local Machine"},i=void 0,o={unversionedId:"getting-started/getting-started-local-installation",id:"getting-started/getting-started-local-installation",title:"Quickstart on Local Machine",description:"Introduction",source:"@site/reference/getting-started/getting-started-local-installation.md",sourceDirName:"getting-started",slug:"/getting-started/getting-started-local-installation",permalink:"/docs/getting-started/getting-started-local-installation",draft:!1,editUrl:"https://github.com/arkemishub/arke-docs/reference/getting-started/getting-started-local-installation.md",tags:[],version:"current",frontMatter:{id:"getting-started-local-installation",title:"Quickstart on Local Machine"},sidebar:"docsSidebar",previous:{title:"Quickstart with Docker",permalink:"/docs/getting-started/getting-started-docker"},next:{title:"How it works",permalink:"/docs/getting-started/how-it-works"}},s={},p=[{value:"Introduction",id:"introduction",level:2},{value:"Step 1: Define the Workspace",id:"step-1-define-the-workspace",level:3},{value:"Step 2: Init the Arke Backend project",id:"step-2-init-the-arke-backend-project",level:3},{value:"Step 2: Init the Arke Console project",id:"step-2-init-the-arke-console-project",level:3},{value:"Environment",id:"environment",level:3}],c={toc:p};function k(e){let{components:t,...n}=e;return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"introduction"},"Introduction"),(0,l.kt)("p",null,"This guide will help you get up and running quickly with the Arke Engine on local machine."),(0,l.kt)("h3",{id:"step-1-define-the-workspace"},"Step 1: Define the Workspace"),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"Workspace")," folder create an ",(0,l.kt)("inlineCode",{parentName:"p"},"Arke")," folder, inside it we will initialize the backend project and the Arke Console."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~/Workspace/\nmkdir Arke\n")),(0,l.kt)("p",null,"Define in the file ",(0,l.kt)("inlineCode",{parentName:"p"},"~/.zshenv")," the path to the Arke directory with the key ",(0,l.kt)("inlineCode",{parentName:"p"},"ARKE_WORKSPACE")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Arkemis\nexport ARKE_WORKSPACE=/Users/<YOUR_USERNAME>/Workspace/Arke\n")),(0,l.kt)("h3",{id:"step-2-init-the-arke-backend-project"},"Step 2: Init the Arke Backend project"),(0,l.kt)("p",null,"Clone the ",(0,l.kt)("inlineCode",{parentName:"p"},"Phoenix Starter")," project and backend libraries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:arkemishub/phoenix_starter.git\ngit clone git@github.com:arkemishub/arke-monorepo-elixir.git\n")),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"phoenix_starter")," folder, create a ",(0,l.kt)("inlineCode",{parentName:"p"},".env")," file and add the following environment variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"export DB_NAME=<ARKE_DB_NAME>\nexport DB_HOSTNAME=<ARKE_DB_HOSTNAME>\nexport DB_USER=<ARKE_DB_USER>\nexport DB_PASSWORD=<ARKE_DB_PASSWORD>\n")),(0,l.kt)("p",null,"To start the Arke backend launch from the project root ",(0,l.kt)("inlineCode",{parentName:"p"},"phoenix_starter"),": "),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git fetch --all -p\ngit pull origin main\nmix deps.clean --all\nmix deps.get\nsource .env\niex -S mix phx.server\n")),(0,l.kt)("h2",{id:""}),(0,l.kt)("h3",{id:"step-2-init-the-arke-console-project"},"Step 2: Init the Arke Console project"),(0,l.kt)("p",null,"Clone the ",(0,l.kt)("inlineCode",{parentName:"p"},"Arke Console")," project and frontend libraries."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:arkemishub/arke-console.git\ngit clone git@github.com:arkemishub/arke-monorepo.git\n")),(0,l.kt)("p",null,"Define in the ",(0,l.kt)("inlineCode",{parentName:"p"},"hosts")," file a dedicated console host ",(0,l.kt)("inlineCode",{parentName:"p"},"local.arkehub.com"),":"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"cd /etc/hosts\nsudo vim hosts\n")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"# Arke Hosts\n127.0.0.1 local.arkehub.com\n")),(0,l.kt)("h3",{id:"environment"},"Environment"),(0,l.kt)("p",null,"Create a new ",(0,l.kt)("inlineCode",{parentName:"p"},"SECRETH_AUTH")," for the next project with the command:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"openssl rand -base64 32\n")),(0,l.kt)("p",null,"In the ",(0,l.kt)("inlineCode",{parentName:"p"},"arke_console")," folder create a ",(0,l.kt)("inlineCode",{parentName:"p"},".env.local")," file and add the following environment variables:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"NEXTAUTH_URL=http://local.arkehub.com:3100\nNEXTAUTH_SECRET=<SECRETH_AUTH>\nGH_PA_TOKEN=<GH_PA_TOKEN>\n# Client Side require NEXT_PUBLIC_\nNEXT_PUBLIC_ARKE_SERVER_URL=http://localhost:4000\n")),(0,l.kt)("p",null,"To start the console from the root of the ",(0,l.kt)("inlineCode",{parentName:"p"},"arke_console")," project run:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm install \npnpm start\n")),(0,l.kt)("p",null,"Then access the console from the browser by reaching the address ",(0,l.kt)("a",{parentName:"p",href:"https://local.arkehub.com:3100"},"https://local.arkehub.com:3100")))}k.isMDXComponent=!0}}]);