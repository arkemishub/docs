"use strict";(self.webpackChunkarke=self.webpackChunkarke||[]).push([[1162],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>u});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},k=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),k=c(n),u=a,h=k["".concat(p,".").concat(u)]||k[u]||d[u]||l;return n?r.createElement(h,o(o({ref:t},s),{},{components:n})):r.createElement(h,o({ref:t},s))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,o=new Array(l);o[0]=k;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,o[1]=i;for(var c=2;c<l;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}k.displayName="MDXCreateElement"},6262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>l,metadata:()=>i,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const l={id:"getting-started-local-installation",title:"Quickstart on Local Machine"},o=void 0,i={unversionedId:"getting-started/getting-started-local-installation",id:"getting-started/getting-started-local-installation",title:"Quickstart on Local Machine",description:"This guide will help you get up and running quickly with the Arke Engine on local machine.",source:"@site/reference/getting-started/getting-started-local-installation.md",sourceDirName:"getting-started",slug:"/getting-started/getting-started-local-installation",permalink:"/docs/getting-started/getting-started-local-installation",draft:!1,editUrl:"https://github.com/arkemishub/arke-docs/reference/getting-started/getting-started-local-installation.md",tags:[],version:"current",frontMatter:{id:"getting-started-local-installation",title:"Quickstart on Local Machine"},sidebar:"docsSidebar",previous:{title:"Architecture",permalink:"/docs/architecture"},next:{title:"Elixir Language",permalink:"/docs/backend/elixir"}},p={},c=[{value:"Step 1: Define the Workspace",id:"step-1-define-the-workspace",level:3},{value:"Step 2: Init the Starter frontend project",id:"step-2-init-the-starter-frontend-project",level:3},{value:"Environment",id:"environment",level:4},{value:"Step 3: Init the Starter Backend project",id:"step-3-init-the-starter-backend-project",level:3},{value:"Step 4: Init the Arke Console project",id:"step-4-init-the-arke-console-project",level:3},{value:"Environment",id:"environment-1",level:4}],s={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"This guide will help you get up and running quickly with the Arke Engine on local machine."),(0,a.kt)("h3",{id:"step-1-define-the-workspace"},"Step 1: Define the Workspace"),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Workspace")," folder create an ",(0,a.kt)("inlineCode",{parentName:"p"},"Arke")," folder, inside it we will initialize the backend project and the Arke Console."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd ~/Workspace/\nmkdir Arke\n")),(0,a.kt)("p",null,"Define in the file ",(0,a.kt)("inlineCode",{parentName:"p"},"~/.zshenv")," the path to the Arke directory with the key ",(0,a.kt)("inlineCode",{parentName:"p"},"ARKE_WORKSPACE")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Arke workspace\nexport ARKE_WORKSPACE=/Users/<YOUR_USERNAME>/Workspace/Arke\n")),(0,a.kt)("h3",{id:"step-2-init-the-starter-frontend-project"},"Step 2: Init the Starter frontend project"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("inlineCode",{parentName:"p"},"Starter Frontend")," project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:arkemishub/arke-starter-frontend.git\n")),(0,a.kt)("h4",{id:"environment"},"Environment"),(0,a.kt)("p",null,"Create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"SECRETH_AUTH")," for the next project with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl rand -base64 32\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"Frontend Starter")," folder create a ",(0,a.kt)("inlineCode",{parentName:"p"},".env.local")," file and add the following environment variables:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"NEXTAUTH_URL=http://localhost:3000\nNEXTAUTH_SECRET=<SECRETH_AUTH>\n# Client Side require NEXT_PUBLIC_\nNEXT_PUBLIC_ARKE_SERVER_URL=http://localhost:4000\n")),(0,a.kt)("p",null,"To start the starter frontend from the root of the ",(0,a.kt)("inlineCode",{parentName:"p"},"arke-starter-frontend")," project run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm install \npnpm dev\n")),(0,a.kt)("h3",{id:"step-3-init-the-starter-backend-project"},"Step 3: Init the Starter Backend project"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("inlineCode",{parentName:"p"},"Backend Starter")," project and backend libraries."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:arkemishub/arke-starter-backend.git\ngit clone git@github.com:arkemishub/arke-monorepo-elixir.git\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"arke-starter-backend")," folder, create a ",(0,a.kt)("inlineCode",{parentName:"p"},".env")," file and add the following environment variables:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"export DB_NAME=<ARKE_DB_NAME>\nexport DB_HOSTNAME=<ARKE_DB_HOSTNAME>\nexport DB_USER=<ARKE_DB_USER>\nexport DB_PASSWORD=<ARKE_DB_PASSWORD>\n")),(0,a.kt)("p",null,"To start the Arke backend launch from the project root ",(0,a.kt)("inlineCode",{parentName:"p"},"arke-starter-backend"),": "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git fetch --all -p\ngit pull origin main\nmix deps.clean --all\nmix deps.get\nsource .env\niex -S mix phx.backend\n")),(0,a.kt)("h3",{id:"step-4-init-the-arke-console-project"},"Step 4: Init the Arke Console project"),(0,a.kt)("p",null,"Clone the ",(0,a.kt)("inlineCode",{parentName:"p"},"Arke Console")," project."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"git clone git@github.com:arkemishub/arke-console.git\n")),(0,a.kt)("p",null,"Define in the ",(0,a.kt)("inlineCode",{parentName:"p"},"hosts")," file a dedicated console host ",(0,a.kt)("inlineCode",{parentName:"p"},"local.arkehub.com"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"cd /etc/hosts\nsudo vim hosts\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"# Arke Hosts\n127.0.0.1 local.arkehub.com\n")),(0,a.kt)("h4",{id:"environment-1"},"Environment"),(0,a.kt)("p",null,"Create a new ",(0,a.kt)("inlineCode",{parentName:"p"},"SECRETH_AUTH")," for the next project with the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"openssl rand -base64 32\n")),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"arke_console")," folder create a ",(0,a.kt)("inlineCode",{parentName:"p"},".env.local")," file and add the following environment variables:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"NEXTAUTH_URL=http://local.arkehub.com:3100\nNEXTAUTH_SECRET=<SECRETH_AUTH>\n# Client Side require NEXT_PUBLIC_\nNEXT_PUBLIC_ARKE_SERVER_URL=http://localhost:4000\n")),(0,a.kt)("p",null,"To start the console from the root of the ",(0,a.kt)("inlineCode",{parentName:"p"},"arke_console")," project run:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"pnpm install \npnpm dev\n")),(0,a.kt)("p",null,"Then access the console from the browser by reaching the address ",(0,a.kt)("a",{parentName:"p",href:"https://local.arkehub.com:3100"},"https://local.arkehub.com:3100")))}d.isMDXComponent=!0}}]);